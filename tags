!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
DEBUG	log.h	/^        DEBUG = 1,$/;"	e	enum:rainbow::LogLevel::Level
DateTimeFormatItem	log.cpp	/^    DateTimeFormatItem(const std::string& format = "%Y-%m-%d %H:%M:%s")$/;"	f	class:rainbow::DateTimeFormatItem	access:public	signature:(const std::string& format = Ó)
DateTimeFormatItem	log.cpp	/^class DateTimeFormatItem : public LogFormatter::FormatItem {$/;"	c	namespace:rainbow	file:	inherits:LogFormatter::FormatItem
ERROR	log.h	/^        ERROR = 4,$/;"	e	enum:rainbow::LogLevel::Level
ElapseFormatItem	log.cpp	/^    ElapseFormatItem(const std::string str = "") {}$/;"	f	class:rainbow::ElapseFormatItem	access:public	signature:(const std::string str = Ó)
ElapseFormatItem	log.cpp	/^class ElapseFormatItem : public LogFormatter::FormatItem {$/;"	c	namespace:rainbow	file:	inherits:LogFormatter::FormatItem
FATAL	log.h	/^        FATAL = 5$/;"	e	enum:rainbow::LogLevel::Level
FiberIdFormatItem	log.cpp	/^    FiberIdFormatItem(const std::string str = "") {}$/;"	f	class:rainbow::FiberIdFormatItem	access:public	signature:(const std::string str = Ó)
FiberIdFormatItem	log.cpp	/^class FiberIdFormatItem : public LogFormatter::FormatItem {$/;"	c	namespace:rainbow	file:	inherits:LogFormatter::FormatItem
FileLogAppender	log.cpp	/^FileLogAppender::FileLogAppender(const std::string& name) : m_filename(name) {}$/;"	f	class:rainbow::FileLogAppender	signature:(const std::string& name)
FileLogAppender	log.h	/^    FileLogAppender(const std::string& filename);$/;"	p	class:rainbow::FileLogAppender	access:public	signature:(const std::string& filename)
FileLogAppender	log.h	/^class FileLogAppender : public LogAppender {$/;"	c	namespace:rainbow	inherits:LogAppender
FileNameFormatItem	log.cpp	/^    FileNameFormatItem(const std::string str = "") {}$/;"	f	class:rainbow::FileNameFormatItem	access:public	signature:(const std::string str = Ó)
FileNameFormatItem	log.cpp	/^class FileNameFormatItem : public LogFormatter::FormatItem {$/;"	c	namespace:rainbow	file:	inherits:LogFormatter::FormatItem
FormatItem	log.h	/^        FormatItem(const std::string& fmt = ""){};$/;"	f	class:rainbow::LogFormatter::FormatItem	access:public	signature:(const std::string& fmt = Ó)
FormatItem	log.h	/^    class FormatItem {$/;"	c	class:rainbow::LogFormatter	access:public
GetFiberId	util.cpp	/^uint32_t GetFiberId() {$/;"	f	namespace:rainbow	signature:()
GetFiberId	util.h	/^uint32_t GetFiberId();$/;"	p	namespace:rainbow	signature:()
GetThreadId	util.cpp	/^pid_t GetThreadId() {$/;"	f	namespace:rainbow	signature:()
GetThreadId	util.h	/^pid_t GetThreadId();$/;"	p	namespace:rainbow	signature:()
INFO	log.h	/^        INFO = 2,$/;"	e	enum:rainbow::LogLevel::Level
Level	log.h	/^    enum Level {$/;"	g	class:rainbow::LogLevel	access:public
LevelFormatItem	log.cpp	/^    LevelFormatItem(const std::string str = "") {}$/;"	f	class:rainbow::LevelFormatItem	access:public	signature:(const std::string str = Ó)
LevelFormatItem	log.cpp	/^class LevelFormatItem : public LogFormatter::FormatItem {$/;"	c	namespace:rainbow	file:	inherits:LogFormatter::FormatItem
LineFormatItem	log.cpp	/^    LineFormatItem(const std::string str = "") {}$/;"	f	class:rainbow::LineFormatItem	access:public	signature:(const std::string str = Ó)
LineFormatItem	log.cpp	/^class LineFormatItem : public LogFormatter::FormatItem {$/;"	c	namespace:rainbow	file:	inherits:LogFormatter::FormatItem
LogAppender	log.cpp	/^LogAppender::LogAppender() {$/;"	f	class:rainbow::LogAppender	signature:()
LogAppender	log.h	/^    LogAppender();$/;"	p	class:rainbow::LogAppender	access:public	signature:()
LogAppender	log.h	/^class LogAppender {$/;"	c	namespace:rainbow
LogEvent	log.cpp	/^LogEvent::LogEvent(const std::shared_ptr<Logger> logger, LogLevel::Level level, const char* file, $/;"	f	class:rainbow::LogEvent	signature:(const std::shared_ptr<Logger> logger, LogLevel::Level level, const char* file, int32_t line, uint32_t elapse, uint32_t thread_id, uint32_t fiber_id, uint64_t time)
LogEvent	log.h	/^    LogEvent(std::shared_ptr<Logger> logger, LogLevel::Level level, const char* file, $/;"	p	class:rainbow::LogEvent	access:public	signature:(std::shared_ptr<Logger> logger, LogLevel::Level level, const char* file, int32_t m_line, uint32_t elapse, uint32_t thread_id, uint32_t fiber_id, uint64_t time)
LogEvent	log.h	/^class LogEvent {$/;"	c	namespace:rainbow
LogEventWrap	log.cpp	/^LogEventWrap::LogEventWrap(LogEvent::ptr e) : m_event(e) {$/;"	f	class:rainbow::LogEventWrap	signature:(LogEvent::ptr e)
LogEventWrap	log.h	/^    LogEventWrap(LogEvent::ptr e);$/;"	p	class:rainbow::LogEventWrap	access:public	signature:(LogEvent::ptr e)
LogEventWrap	log.h	/^class LogEventWrap {$/;"	c	namespace:rainbow
LogFormatter	log.cpp	/^LogFormatter::LogFormatter(const std::string& pattern) : m_pattern(pattern) {$/;"	f	class:rainbow::LogFormatter	signature:(const std::string& pattern)
LogFormatter	log.h	/^    LogFormatter(const std::string& pattern);$/;"	p	class:rainbow::LogFormatter	access:public	signature:(const std::string& pattern)
LogFormatter	log.h	/^class LogFormatter {$/;"	c	namespace:rainbow
LogLevel	log.h	/^class LogLevel {$/;"	c	namespace:rainbow
Logger	log.cpp	/^Logger::Logger(const std::string& name)$/;"	f	class:rainbow::Logger	signature:(const std::string& name)
Logger	log.h	/^    Logger(const std::string& name = "root");$/;"	p	class:rainbow::Logger	access:public	signature:(const std::string& name = Ó)
Logger	log.h	/^class Logger : public std::enable_shared_from_this<Logger> {$/;"	c	namespace:rainbow	inherits:std::enable_shared_from_this
MessageFormatItem	log.cpp	/^    MessageFormatItem(const std::string& str = "") {}$/;"	f	class:rainbow::MessageFormatItem	access:public	signature:(const std::string& str = Ó)
MessageFormatItem	log.cpp	/^class MessageFormatItem : public LogFormatter::FormatItem {$/;"	c	namespace:rainbow	file:	inherits:LogFormatter::FormatItem
NameFormatItem	log.cpp	/^    NameFormatItem(const std::string str = "") {}$/;"	f	class:rainbow::NameFormatItem	access:public	signature:(const std::string str = Ó)
NameFormatItem	log.cpp	/^class NameFormatItem : public LogFormatter::FormatItem {$/;"	c	namespace:rainbow	file:	inherits:LogFormatter::FormatItem
NewLineFormatItem	log.cpp	/^    NewLineFormatItem(const std::string str = "") {}$/;"	f	class:rainbow::NewLineFormatItem	access:public	signature:(const std::string str = Ó)
NewLineFormatItem	log.cpp	/^class NewLineFormatItem : public LogFormatter::FormatItem {$/;"	c	namespace:rainbow	file:	inherits:LogFormatter::FormatItem
RAINBOW_LOG_DEBUG	log.h	20;"	d
RAINBOW_LOG_ERROR	log.h	23;"	d
RAINBOW_LOG_FATAL	log.h	24;"	d
RAINBOW_LOG_FMT_DEBUG	log.h	32;"	d
RAINBOW_LOG_FMT_ERROR	log.h	35;"	d
RAINBOW_LOG_FMT_FATAL	log.h	36;"	d
RAINBOW_LOG_FMT_INFO	log.h	33;"	d
RAINBOW_LOG_FMT_LEVEL	log.h	26;"	d
RAINBOW_LOG_FMT_WARN	log.h	34;"	d
RAINBOW_LOG_INFO	log.h	21;"	d
RAINBOW_LOG_LEVEL	log.h	16;"	d
RAINBOW_LOG_WARN	log.h	22;"	d
StdoutLogAppender	log.h	/^class StdoutLogAppender : public LogAppender {$/;"	c	namespace:rainbow	inherits:LogAppender
StringFormatItem	log.cpp	/^    StringFormatItem(const std::string& str) : m_string(str) {}$/;"	f	class:rainbow::StringFormatItem	access:public	signature:(const std::string& str)
StringFormatItem	log.cpp	/^class StringFormatItem : public LogFormatter::FormatItem {$/;"	c	namespace:rainbow	file:	inherits:LogFormatter::FormatItem
TabFormatItem	log.cpp	/^     TabFormatItem(const std::string& str = "") {}$/;"	f	class:rainbow::TabFormatItem	access:public	signature:(const std::string& str = Ó)
TabFormatItem	log.cpp	/^class TabFormatItem : public LogFormatter::FormatItem {$/;"	c	namespace:rainbow	file:	inherits:LogFormatter::FormatItem
ThreadIdFormatItem	log.cpp	/^    ThreadIdFormatItem(const std::string str = "") {}$/;"	f	class:rainbow::ThreadIdFormatItem	access:public	signature:(const std::string str = Ó)
ThreadIdFormatItem	log.cpp	/^class ThreadIdFormatItem : public LogFormatter::FormatItem {$/;"	c	namespace:rainbow	file:	inherits:LogFormatter::FormatItem
ToString	log.cpp	/^const char* LogLevel::ToString(LogLevel::Level level) {$/;"	f	class:rainbow::LogLevel	signature:(LogLevel::Level level)
ToString	log.h	/^    static const char* ToString(LogLevel::Level level);$/;"	p	class:rainbow::LogLevel	access:public	signature:(LogLevel::Level level)
UNKNOW	log.h	/^        UNKNOW = 0,$/;"	e	enum:rainbow::LogLevel::Level
WARN	log.h	/^        WARN = 3,$/;"	e	enum:rainbow::LogLevel::Level
XX	log.cpp	138;"	d	file:
XX	log.cpp	148;"	d	file:
XX	log.cpp	309;"	d	file:
XX	log.cpp	323;"	d	file:
__RAINBOW_LOG_H	log.h	2;"	d
__RAINBOW_UTIL_H_	util.h	2;"	d
addAppender	log.cpp	/^void Logger::addAppender(LogAppender::ptr appender) {$/;"	f	class:rainbow::Logger	signature:(LogAppender::ptr appender)
addAppender	log.h	/^    void addAppender(LogAppender::ptr appender);$/;"	p	class:rainbow::Logger	access:public	signature:(LogAppender::ptr appender)
debug	log.cpp	/^void Logger::debug(LogEvent::ptr event) { log(LogLevel::DEBUG, event); }$/;"	f	class:rainbow::Logger	signature:(LogEvent::ptr event)
debug	log.h	/^    void debug(LogEvent::ptr event);$/;"	p	class:rainbow::Logger	access:public	signature:(LogEvent::ptr event)
delAppender	log.cpp	/^void Logger::delAppender(LogAppender::ptr appender) {$/;"	f	class:rainbow::Logger	signature:(LogAppender::ptr appender)
delAppender	log.h	/^    void delAppender(LogAppender::ptr appender);$/;"	p	class:rainbow::Logger	access:public	signature:(LogAppender::ptr appender)
error	log.cpp	/^void Logger::error(LogEvent::ptr event) { log(LogLevel::ERROR, event); }$/;"	f	class:rainbow::Logger	signature:(LogEvent::ptr event)
error	log.h	/^    void error(LogEvent::ptr event);$/;"	p	class:rainbow::Logger	access:public	signature:(LogEvent::ptr event)
fatal	log.cpp	/^void Logger::fatal(LogEvent::ptr event) { log(LogLevel::FATAL, event); }$/;"	f	class:rainbow::Logger	signature:(LogEvent::ptr event)
fatal	log.h	/^    void fatal(LogEvent::ptr event);$/;"	p	class:rainbow::Logger	access:public	signature:(LogEvent::ptr event)
format	log.cpp	/^std::string LogFormatter::format(std::shared_ptr<Logger> logger,$/;"	f	class:rainbow::LogFormatter	signature:(std::shared_ptr<Logger> logger, LogLevel::Level level, LogEvent::ptr event)
format	log.cpp	/^void LogEvent::format(const char* fmt, ...) {$/;"	f	class:rainbow::LogEvent	signature:(const char* fmt, ...)
format	log.cpp	/^void LogEvent::format(const char* fmt, va_list al) {$/;"	f	class:rainbow::LogEvent	signature:(const char* fmt, va_list al)
format	log.cpp	/^void LogFormatter::FormatItem::format(std::ostream& os,$/;"	f	class:rainbow::LogFormatter::FormatItem	signature:(std::ostream& os, std::shared_ptr<Logger> logger, LogLevel::Level level, LogEvent::ptr event)
format	log.h	/^        virtual void format(std::ostream& os, std::shared_ptr<Logger> logger,$/;"	p	class:rainbow::LogFormatter::FormatItem	access:public	signature:(std::ostream& os, std::shared_ptr<Logger> logger, LogLevel::Level level, LogEvent::ptr event)
format	log.h	/^    std::ostream& format(std::ostream& ofs, std::shared_ptr<Logger> ptr, LogLevel::Level level, LogEvent::ptr event);$/;"	p	class:rainbow::LogFormatter	access:public	signature:(std::ostream& ofs, std::shared_ptr<Logger> ptr, LogLevel::Level level, LogEvent::ptr event)
format	log.h	/^    std::string format(std::shared_ptr<Logger> ptr, LogLevel::Level level,$/;"	p	class:rainbow::LogFormatter	access:public	signature:(std::shared_ptr<Logger> ptr, LogLevel::Level level, LogEvent::ptr event)
format	log.h	/^    void format(const char* fmt, ...);$/;"	p	class:rainbow::LogEvent	access:public	signature:(const char* fmt, ...)
format	log.h	/^    void format(const char* fmt, va_list al);$/;"	p	class:rainbow::LogEvent	access:public	signature:(const char* fmt, va_list al)
getContent	log.h	/^    std::string getContent() const { return m_ss.str(); }$/;"	f	class:rainbow::LogEvent	access:public	signature:() const
getElapse	log.h	/^    uint32_t getElapse() const { return m_elapse; }$/;"	f	class:rainbow::LogEvent	access:public	signature:() const
getEvent	log.h	/^    LogEvent::ptr getEvent() const { return m_event; }$/;"	f	class:rainbow::LogEventWrap	access:public	signature:() const
getFiberId	log.h	/^    uint32_t getFiberId() const { return m_fiberId; }$/;"	f	class:rainbow::LogEvent	access:public	signature:() const
getFileName	log.h	/^    const char* getFileName() const { return m_file; }$/;"	f	class:rainbow::LogEvent	access:public	signature:() const
getFormatter	log.h	/^    LogFormatter::ptr getFormatter() const { return m_formatter; }$/;"	f	class:rainbow::LogAppender	access:public	signature:() const
getLevel	log.h	/^    LogLevel::Level getLevel() const { return m_level; }$/;"	f	class:rainbow::LogEvent	access:public	signature:() const
getLevel	log.h	/^    LogLevel::Level getLevel() const { return m_level; }$/;"	f	class:rainbow::Logger	access:public	signature:() const
getLine	log.h	/^    int32_t getLine() const { return m_line; }$/;"	f	class:rainbow::LogEvent	access:public	signature:() const
getLogger	log.h	/^    std::shared_ptr<Logger> getLogger() const {  return m_logger; }$/;"	f	class:rainbow::LogEvent	access:public	signature:() const
getName	log.h	/^    const std::string getName() const { return this->m_name; }$/;"	f	class:rainbow::Logger	access:public	signature:() const
getSS	log.cpp	/^std::stringstream& LogEventWrap::getSS() {$/;"	f	class:rainbow::LogEventWrap	signature:()
getSS	log.h	/^    std::stringstream& getSS() { return m_ss; }$/;"	f	class:rainbow::LogEvent	access:public	signature:()
getSS	log.h	/^    std::stringstream& getSS();$/;"	p	class:rainbow::LogEventWrap	access:public	signature:()
getString	log.cpp	/^    std::string getString() const { return m_string; }$/;"	f	class:rainbow::StringFormatItem	access:public	signature:() const
getThreadId	log.h	/^    uint32_t getThreadId() const { return m_threadId; }$/;"	f	class:rainbow::LogEvent	access:public	signature:() const
getTime	log.h	/^    uint32_t getTime() const { return m_time; }$/;"	f	class:rainbow::LogEvent	access:public	signature:() const
info	log.cpp	/^void Logger::info(LogEvent::ptr event) { log(LogLevel::INFO, event); }$/;"	f	class:rainbow::Logger	signature:(LogEvent::ptr event)
info	log.h	/^    void info(LogEvent::ptr event);$/;"	p	class:rainbow::Logger	access:public	signature:(LogEvent::ptr event)
init	log.cpp	/^void LogFormatter::init() {$/;"	f	class:rainbow::LogFormatter	signature:()
init	log.h	/^    void init();$/;"	p	class:rainbow::LogFormatter	access:public	signature:()
log	log.cpp	/^void FileLogAppender::log(std::shared_ptr<Logger> logger, LogLevel::Level level,$/;"	f	class:rainbow::FileLogAppender	signature:(std::shared_ptr<Logger> logger, LogLevel::Level level, LogEvent::ptr event)
log	log.cpp	/^void Logger::log(LogLevel::Level level, LogEvent::ptr event) {$/;"	f	class:rainbow::Logger	signature:(LogLevel::Level level, LogEvent::ptr event)
log	log.cpp	/^void StdoutLogAppender::log(std::shared_ptr<Logger> logger,$/;"	f	class:rainbow::StdoutLogAppender	signature:(std::shared_ptr<Logger> logger, LogLevel::Level level, LogEvent::ptr event)
log	log.h	/^    virtual void log(std::shared_ptr<Logger> logger, LogLevel::Level level,$/;"	p	class:rainbow::LogAppender	access:public	signature:(std::shared_ptr<Logger> logger, LogLevel::Level level, LogEvent::ptr event)
log	log.h	/^    void log(LogLevel::Level level, LogEvent::ptr event);$/;"	p	class:rainbow::Logger	access:public	signature:(LogLevel::Level level, LogEvent::ptr event)
m_appenders	log.h	/^    std::list<LogAppender::ptr> m_appenders;  \/\/ Appenderéå$/;"	m	class:rainbow::Logger	access:private
m_elapse	log.h	/^    uint32_t m_elapse = 0;         \/\/ ç¨åºå¯å¨å¼å§å°ç°å¨çæ¯«ç§æ°$/;"	m	class:rainbow::LogEvent	access:private
m_event	log.h	/^    LogEvent::ptr m_event;$/;"	m	class:rainbow::LogEventWrap	access:private
m_fiberId	log.h	/^    uint32_t m_fiberId = 0;        \/\/ åç¨id$/;"	m	class:rainbow::LogEvent	access:private
m_file	log.h	/^    const char* m_file = nullptr;  \/\/ æä»¶å$/;"	m	class:rainbow::LogEvent	access:private
m_filename	log.h	/^    std::string m_filename;$/;"	m	class:rainbow::FileLogAppender	access:private
m_filestream	log.h	/^    std::ofstream m_filestream;$/;"	m	class:rainbow::FileLogAppender	access:private
m_format	log.cpp	/^    std::string m_format;$/;"	m	class:rainbow::DateTimeFormatItem	file:	access:private
m_formatter	log.h	/^    LogFormatter::ptr m_formatter;$/;"	m	class:rainbow::LogAppender	access:protected
m_formatter	log.h	/^    LogFormatter::ptr m_formatter;$/;"	m	class:rainbow::Logger	access:private
m_items	log.h	/^    std::vector<FormatItem::ptr> m_items;$/;"	m	class:rainbow::LogFormatter	access:private
m_level	log.h	/^    LogLevel::Level m_level;  \/\/ æ»¡è¶³æ¥å¿çº§å«çæ¥å¿æä¼è¢«è¾åº$/;"	m	class:rainbow::Logger	access:private
m_level	log.h	/^    LogLevel::Level m_level;$/;"	m	class:rainbow::LogAppender	access:protected
m_level	log.h	/^    LogLevel::Level m_level;$/;"	m	class:rainbow::LogEvent	access:private
m_line	log.h	/^    int32_t m_line = 0;            \/\/ è¡å·$/;"	m	class:rainbow::LogEvent	access:private
m_logger	log.h	/^    std::shared_ptr<Logger> m_logger;$/;"	m	class:rainbow::LogEvent	access:private
m_name	log.h	/^    std::string m_name = "root";       \/\/ æ¥å¿åç§°$/;"	m	class:rainbow::Logger	access:private
m_pattern	log.h	/^    std::string m_pattern;$/;"	m	class:rainbow::LogFormatter	access:private
m_ss	log.h	/^    std::stringstream m_ss;$/;"	m	class:rainbow::LogEvent	access:private
m_string	log.cpp	/^    std::string m_string;$/;"	m	class:rainbow::StringFormatItem	file:	access:private
m_threadId	log.h	/^    uint32_t m_threadId = 0;       \/\/ çº¿ç¨id$/;"	m	class:rainbow::LogEvent	access:private
m_time	log.h	/^    uint64_t m_time;               \/\/ æ¶é´æ³$/;"	m	class:rainbow::LogEvent	access:private
main	test.cpp	/^int main(int argc, char** argv) {$/;"	f	signature:(int argc, char** argv)
override	log.h	/^                     LogEvent::ptr event) override;$/;"	m	class:rainbow::FileLogAppender	access:public
override	log.h	/^                     LogEvent::ptr event) override;$/;"	m	class:rainbow::StdoutLogAppender	access:public
ptr	log.h	/^        typedef std::shared_ptr<FormatItem> ptr;$/;"	t	class:rainbow::LogFormatter::FormatItem	access:public
ptr	log.h	/^    typedef std::shared_ptr<FileLogAppender> ptr;$/;"	t	class:rainbow::FileLogAppender	access:public
ptr	log.h	/^    typedef std::shared_ptr<LogAppender> ptr;$/;"	t	class:rainbow::LogAppender	access:public
ptr	log.h	/^    typedef std::shared_ptr<LogEvent> ptr;$/;"	t	class:rainbow::LogEvent	access:public
ptr	log.h	/^    typedef std::shared_ptr<LogFormatter> ptr;$/;"	t	class:rainbow::LogFormatter	access:public
ptr	log.h	/^    typedef std::shared_ptr<Logger> ptr;$/;"	t	class:rainbow::Logger	access:public
ptr	log.h	/^    typedef std::shared_ptr<StdoutLogAppender> ptr;$/;"	t	class:rainbow::StdoutLogAppender	access:public
rainbow	log.cpp	/^namespace rainbow {$/;"	n	file:
rainbow	log.h	/^namespace rainbow {$/;"	n
rainbow	util.cpp	/^namespace rainbow {$/;"	n	file:
rainbow	util.h	/^namespace rainbow {$/;"	n
rainbow::DateTimeFormatItem	log.cpp	/^class DateTimeFormatItem : public LogFormatter::FormatItem {$/;"	c	namespace:rainbow	file:	inherits:LogFormatter::FormatItem
rainbow::DateTimeFormatItem::DateTimeFormatItem	log.cpp	/^    DateTimeFormatItem(const std::string& format = "%Y-%m-%d %H:%M:%s")$/;"	f	class:rainbow::DateTimeFormatItem	access:public	signature:(const std::string& format = Ó)
rainbow::DateTimeFormatItem::m_format	log.cpp	/^    std::string m_format;$/;"	m	class:rainbow::DateTimeFormatItem	file:	access:private
rainbow::ElapseFormatItem	log.cpp	/^class ElapseFormatItem : public LogFormatter::FormatItem {$/;"	c	namespace:rainbow	file:	inherits:LogFormatter::FormatItem
rainbow::ElapseFormatItem::ElapseFormatItem	log.cpp	/^    ElapseFormatItem(const std::string str = "") {}$/;"	f	class:rainbow::ElapseFormatItem	access:public	signature:(const std::string str = Ó)
rainbow::FiberIdFormatItem	log.cpp	/^class FiberIdFormatItem : public LogFormatter::FormatItem {$/;"	c	namespace:rainbow	file:	inherits:LogFormatter::FormatItem
rainbow::FiberIdFormatItem::FiberIdFormatItem	log.cpp	/^    FiberIdFormatItem(const std::string str = "") {}$/;"	f	class:rainbow::FiberIdFormatItem	access:public	signature:(const std::string str = Ó)
rainbow::FileLogAppender	log.h	/^class FileLogAppender : public LogAppender {$/;"	c	namespace:rainbow	inherits:LogAppender
rainbow::FileLogAppender::FileLogAppender	log.cpp	/^FileLogAppender::FileLogAppender(const std::string& name) : m_filename(name) {}$/;"	f	class:rainbow::FileLogAppender	signature:(const std::string& name)
rainbow::FileLogAppender::FileLogAppender	log.h	/^    FileLogAppender(const std::string& filename);$/;"	p	class:rainbow::FileLogAppender	access:public	signature:(const std::string& filename)
rainbow::FileLogAppender::log	log.cpp	/^void FileLogAppender::log(std::shared_ptr<Logger> logger, LogLevel::Level level,$/;"	f	class:rainbow::FileLogAppender	signature:(std::shared_ptr<Logger> logger, LogLevel::Level level, LogEvent::ptr event)
rainbow::FileLogAppender::m_filename	log.h	/^    std::string m_filename;$/;"	m	class:rainbow::FileLogAppender	access:private
rainbow::FileLogAppender::m_filestream	log.h	/^    std::ofstream m_filestream;$/;"	m	class:rainbow::FileLogAppender	access:private
rainbow::FileLogAppender::override	log.h	/^                     LogEvent::ptr event) override;$/;"	m	class:rainbow::FileLogAppender	access:public
rainbow::FileLogAppender::ptr	log.h	/^    typedef std::shared_ptr<FileLogAppender> ptr;$/;"	t	class:rainbow::FileLogAppender	access:public
rainbow::FileLogAppender::reopen	log.cpp	/^bool FileLogAppender::reopen() {$/;"	f	class:rainbow::FileLogAppender	signature:()
rainbow::FileLogAppender::reopen	log.h	/^    bool reopen();$/;"	p	class:rainbow::FileLogAppender	access:public	signature:()
rainbow::FileNameFormatItem	log.cpp	/^class FileNameFormatItem : public LogFormatter::FormatItem {$/;"	c	namespace:rainbow	file:	inherits:LogFormatter::FormatItem
rainbow::FileNameFormatItem::FileNameFormatItem	log.cpp	/^    FileNameFormatItem(const std::string str = "") {}$/;"	f	class:rainbow::FileNameFormatItem	access:public	signature:(const std::string str = Ó)
rainbow::GetFiberId	util.cpp	/^uint32_t GetFiberId() {$/;"	f	namespace:rainbow	signature:()
rainbow::GetFiberId	util.h	/^uint32_t GetFiberId();$/;"	p	namespace:rainbow	signature:()
rainbow::GetThreadId	util.cpp	/^pid_t GetThreadId() {$/;"	f	namespace:rainbow	signature:()
rainbow::GetThreadId	util.h	/^pid_t GetThreadId();$/;"	p	namespace:rainbow	signature:()
rainbow::LevelFormatItem	log.cpp	/^class LevelFormatItem : public LogFormatter::FormatItem {$/;"	c	namespace:rainbow	file:	inherits:LogFormatter::FormatItem
rainbow::LevelFormatItem::LevelFormatItem	log.cpp	/^    LevelFormatItem(const std::string str = "") {}$/;"	f	class:rainbow::LevelFormatItem	access:public	signature:(const std::string str = Ó)
rainbow::LineFormatItem	log.cpp	/^class LineFormatItem : public LogFormatter::FormatItem {$/;"	c	namespace:rainbow	file:	inherits:LogFormatter::FormatItem
rainbow::LineFormatItem::LineFormatItem	log.cpp	/^    LineFormatItem(const std::string str = "") {}$/;"	f	class:rainbow::LineFormatItem	access:public	signature:(const std::string str = Ó)
rainbow::LogAppender	log.h	/^class LogAppender {$/;"	c	namespace:rainbow
rainbow::LogAppender::LogAppender	log.cpp	/^LogAppender::LogAppender() {$/;"	f	class:rainbow::LogAppender	signature:()
rainbow::LogAppender::LogAppender	log.h	/^    LogAppender();$/;"	p	class:rainbow::LogAppender	access:public	signature:()
rainbow::LogAppender::getFormatter	log.h	/^    LogFormatter::ptr getFormatter() const { return m_formatter; }$/;"	f	class:rainbow::LogAppender	access:public	signature:() const
rainbow::LogAppender::log	log.h	/^    virtual void log(std::shared_ptr<Logger> logger, LogLevel::Level level,$/;"	p	class:rainbow::LogAppender	access:public	signature:(std::shared_ptr<Logger> logger, LogLevel::Level level, LogEvent::ptr event)
rainbow::LogAppender::m_formatter	log.h	/^    LogFormatter::ptr m_formatter;$/;"	m	class:rainbow::LogAppender	access:protected
rainbow::LogAppender::m_level	log.h	/^    LogLevel::Level m_level;$/;"	m	class:rainbow::LogAppender	access:protected
rainbow::LogAppender::ptr	log.h	/^    typedef std::shared_ptr<LogAppender> ptr;$/;"	t	class:rainbow::LogAppender	access:public
rainbow::LogAppender::setFormatter	log.h	/^    void setFormatter(LogFormatter::ptr val) { m_formatter = val; }$/;"	f	class:rainbow::LogAppender	access:public	signature:(LogFormatter::ptr val)
rainbow::LogAppender::~LogAppender	log.h	/^    virtual ~LogAppender() {}$/;"	f	class:rainbow::LogAppender	access:public	signature:()
rainbow::LogEvent	log.h	/^class LogEvent {$/;"	c	namespace:rainbow
rainbow::LogEvent::LogEvent	log.cpp	/^LogEvent::LogEvent(const std::shared_ptr<Logger> logger, LogLevel::Level level, const char* file, $/;"	f	class:rainbow::LogEvent	signature:(const std::shared_ptr<Logger> logger, LogLevel::Level level, const char* file, int32_t line, uint32_t elapse, uint32_t thread_id, uint32_t fiber_id, uint64_t time)
rainbow::LogEvent::LogEvent	log.h	/^    LogEvent(std::shared_ptr<Logger> logger, LogLevel::Level level, const char* file, $/;"	p	class:rainbow::LogEvent	access:public	signature:(std::shared_ptr<Logger> logger, LogLevel::Level level, const char* file, int32_t m_line, uint32_t elapse, uint32_t thread_id, uint32_t fiber_id, uint64_t time)
rainbow::LogEvent::format	log.cpp	/^void LogEvent::format(const char* fmt, ...) {$/;"	f	class:rainbow::LogEvent	signature:(const char* fmt, ...)
rainbow::LogEvent::format	log.cpp	/^void LogEvent::format(const char* fmt, va_list al) {$/;"	f	class:rainbow::LogEvent	signature:(const char* fmt, va_list al)
rainbow::LogEvent::format	log.h	/^    void format(const char* fmt, ...);$/;"	p	class:rainbow::LogEvent	access:public	signature:(const char* fmt, ...)
rainbow::LogEvent::format	log.h	/^    void format(const char* fmt, va_list al);$/;"	p	class:rainbow::LogEvent	access:public	signature:(const char* fmt, va_list al)
rainbow::LogEvent::getContent	log.h	/^    std::string getContent() const { return m_ss.str(); }$/;"	f	class:rainbow::LogEvent	access:public	signature:() const
rainbow::LogEvent::getElapse	log.h	/^    uint32_t getElapse() const { return m_elapse; }$/;"	f	class:rainbow::LogEvent	access:public	signature:() const
rainbow::LogEvent::getFiberId	log.h	/^    uint32_t getFiberId() const { return m_fiberId; }$/;"	f	class:rainbow::LogEvent	access:public	signature:() const
rainbow::LogEvent::getFileName	log.h	/^    const char* getFileName() const { return m_file; }$/;"	f	class:rainbow::LogEvent	access:public	signature:() const
rainbow::LogEvent::getLevel	log.h	/^    LogLevel::Level getLevel() const { return m_level; }$/;"	f	class:rainbow::LogEvent	access:public	signature:() const
rainbow::LogEvent::getLine	log.h	/^    int32_t getLine() const { return m_line; }$/;"	f	class:rainbow::LogEvent	access:public	signature:() const
rainbow::LogEvent::getLogger	log.h	/^    std::shared_ptr<Logger> getLogger() const {  return m_logger; }$/;"	f	class:rainbow::LogEvent	access:public	signature:() const
rainbow::LogEvent::getSS	log.h	/^    std::stringstream& getSS() { return m_ss; }$/;"	f	class:rainbow::LogEvent	access:public	signature:()
rainbow::LogEvent::getThreadId	log.h	/^    uint32_t getThreadId() const { return m_threadId; }$/;"	f	class:rainbow::LogEvent	access:public	signature:() const
rainbow::LogEvent::getTime	log.h	/^    uint32_t getTime() const { return m_time; }$/;"	f	class:rainbow::LogEvent	access:public	signature:() const
rainbow::LogEvent::m_elapse	log.h	/^    uint32_t m_elapse = 0;         \/\/ ç¨åºå¯å¨å¼å§å°ç°å¨çæ¯«ç§æ°$/;"	m	class:rainbow::LogEvent	access:private
rainbow::LogEvent::m_fiberId	log.h	/^    uint32_t m_fiberId = 0;        \/\/ åç¨id$/;"	m	class:rainbow::LogEvent	access:private
rainbow::LogEvent::m_file	log.h	/^    const char* m_file = nullptr;  \/\/ æä»¶å$/;"	m	class:rainbow::LogEvent	access:private
rainbow::LogEvent::m_level	log.h	/^    LogLevel::Level m_level;$/;"	m	class:rainbow::LogEvent	access:private
rainbow::LogEvent::m_line	log.h	/^    int32_t m_line = 0;            \/\/ è¡å·$/;"	m	class:rainbow::LogEvent	access:private
rainbow::LogEvent::m_logger	log.h	/^    std::shared_ptr<Logger> m_logger;$/;"	m	class:rainbow::LogEvent	access:private
rainbow::LogEvent::m_ss	log.h	/^    std::stringstream m_ss;$/;"	m	class:rainbow::LogEvent	access:private
rainbow::LogEvent::m_threadId	log.h	/^    uint32_t m_threadId = 0;       \/\/ çº¿ç¨id$/;"	m	class:rainbow::LogEvent	access:private
rainbow::LogEvent::m_time	log.h	/^    uint64_t m_time;               \/\/ æ¶é´æ³$/;"	m	class:rainbow::LogEvent	access:private
rainbow::LogEvent::ptr	log.h	/^    typedef std::shared_ptr<LogEvent> ptr;$/;"	t	class:rainbow::LogEvent	access:public
rainbow::LogEvent::~LogEvent	log.h	/^    ~LogEvent() {}$/;"	f	class:rainbow::LogEvent	access:public	signature:()
rainbow::LogEventWrap	log.h	/^class LogEventWrap {$/;"	c	namespace:rainbow
rainbow::LogEventWrap::LogEventWrap	log.cpp	/^LogEventWrap::LogEventWrap(LogEvent::ptr e) : m_event(e) {$/;"	f	class:rainbow::LogEventWrap	signature:(LogEvent::ptr e)
rainbow::LogEventWrap::LogEventWrap	log.h	/^    LogEventWrap(LogEvent::ptr e);$/;"	p	class:rainbow::LogEventWrap	access:public	signature:(LogEvent::ptr e)
rainbow::LogEventWrap::getEvent	log.h	/^    LogEvent::ptr getEvent() const { return m_event; }$/;"	f	class:rainbow::LogEventWrap	access:public	signature:() const
rainbow::LogEventWrap::getSS	log.cpp	/^std::stringstream& LogEventWrap::getSS() {$/;"	f	class:rainbow::LogEventWrap	signature:()
rainbow::LogEventWrap::getSS	log.h	/^    std::stringstream& getSS();$/;"	p	class:rainbow::LogEventWrap	access:public	signature:()
rainbow::LogEventWrap::m_event	log.h	/^    LogEvent::ptr m_event;$/;"	m	class:rainbow::LogEventWrap	access:private
rainbow::LogEventWrap::~LogEventWrap	log.cpp	/^LogEventWrap::~LogEventWrap() {$/;"	f	class:rainbow::LogEventWrap	signature:()
rainbow::LogEventWrap::~LogEventWrap	log.h	/^    ~LogEventWrap();$/;"	p	class:rainbow::LogEventWrap	access:public	signature:()
rainbow::LogFormatter	log.h	/^class LogFormatter {$/;"	c	namespace:rainbow
rainbow::LogFormatter::FormatItem	log.h	/^    class FormatItem {$/;"	c	class:rainbow::LogFormatter	access:public
rainbow::LogFormatter::FormatItem::FormatItem	log.h	/^        FormatItem(const std::string& fmt = ""){};$/;"	f	class:rainbow::LogFormatter::FormatItem	access:public	signature:(const std::string& fmt = Ó)
rainbow::LogFormatter::FormatItem::format	log.cpp	/^void LogFormatter::FormatItem::format(std::ostream& os,$/;"	f	class:rainbow::LogFormatter::FormatItem	signature:(std::ostream& os, std::shared_ptr<Logger> logger, LogLevel::Level level, LogEvent::ptr event)
rainbow::LogFormatter::FormatItem::format	log.h	/^        virtual void format(std::ostream& os, std::shared_ptr<Logger> logger,$/;"	p	class:rainbow::LogFormatter::FormatItem	access:public	signature:(std::ostream& os, std::shared_ptr<Logger> logger, LogLevel::Level level, LogEvent::ptr event)
rainbow::LogFormatter::FormatItem::ptr	log.h	/^        typedef std::shared_ptr<FormatItem> ptr;$/;"	t	class:rainbow::LogFormatter::FormatItem	access:public
rainbow::LogFormatter::FormatItem::~FormatItem	log.h	/^        virtual ~FormatItem() {}$/;"	f	class:rainbow::LogFormatter::FormatItem	access:public	signature:()
rainbow::LogFormatter::LogFormatter	log.cpp	/^LogFormatter::LogFormatter(const std::string& pattern) : m_pattern(pattern) {$/;"	f	class:rainbow::LogFormatter	signature:(const std::string& pattern)
rainbow::LogFormatter::LogFormatter	log.h	/^    LogFormatter(const std::string& pattern);$/;"	p	class:rainbow::LogFormatter	access:public	signature:(const std::string& pattern)
rainbow::LogFormatter::format	log.cpp	/^std::string LogFormatter::format(std::shared_ptr<Logger> logger,$/;"	f	class:rainbow::LogFormatter	signature:(std::shared_ptr<Logger> logger, LogLevel::Level level, LogEvent::ptr event)
rainbow::LogFormatter::format	log.h	/^    std::ostream& format(std::ostream& ofs, std::shared_ptr<Logger> ptr, LogLevel::Level level, LogEvent::ptr event);$/;"	p	class:rainbow::LogFormatter	access:public	signature:(std::ostream& ofs, std::shared_ptr<Logger> ptr, LogLevel::Level level, LogEvent::ptr event)
rainbow::LogFormatter::format	log.h	/^    std::string format(std::shared_ptr<Logger> ptr, LogLevel::Level level,$/;"	p	class:rainbow::LogFormatter	access:public	signature:(std::shared_ptr<Logger> ptr, LogLevel::Level level, LogEvent::ptr event)
rainbow::LogFormatter::init	log.cpp	/^void LogFormatter::init() {$/;"	f	class:rainbow::LogFormatter	signature:()
rainbow::LogFormatter::init	log.h	/^    void init();$/;"	p	class:rainbow::LogFormatter	access:public	signature:()
rainbow::LogFormatter::m_items	log.h	/^    std::vector<FormatItem::ptr> m_items;$/;"	m	class:rainbow::LogFormatter	access:private
rainbow::LogFormatter::m_pattern	log.h	/^    std::string m_pattern;$/;"	m	class:rainbow::LogFormatter	access:private
rainbow::LogFormatter::ptr	log.h	/^    typedef std::shared_ptr<LogFormatter> ptr;$/;"	t	class:rainbow::LogFormatter	access:public
rainbow::LogLevel	log.h	/^class LogLevel {$/;"	c	namespace:rainbow
rainbow::LogLevel::DEBUG	log.h	/^        DEBUG = 1,$/;"	e	enum:rainbow::LogLevel::Level
rainbow::LogLevel::ERROR	log.h	/^        ERROR = 4,$/;"	e	enum:rainbow::LogLevel::Level
rainbow::LogLevel::FATAL	log.h	/^        FATAL = 5$/;"	e	enum:rainbow::LogLevel::Level
rainbow::LogLevel::INFO	log.h	/^        INFO = 2,$/;"	e	enum:rainbow::LogLevel::Level
rainbow::LogLevel::Level	log.h	/^    enum Level {$/;"	g	class:rainbow::LogLevel	access:public
rainbow::LogLevel::ToString	log.cpp	/^const char* LogLevel::ToString(LogLevel::Level level) {$/;"	f	class:rainbow::LogLevel	signature:(LogLevel::Level level)
rainbow::LogLevel::ToString	log.h	/^    static const char* ToString(LogLevel::Level level);$/;"	p	class:rainbow::LogLevel	access:public	signature:(LogLevel::Level level)
rainbow::LogLevel::UNKNOW	log.h	/^        UNKNOW = 0,$/;"	e	enum:rainbow::LogLevel::Level
rainbow::LogLevel::WARN	log.h	/^        WARN = 3,$/;"	e	enum:rainbow::LogLevel::Level
rainbow::Logger	log.h	/^class Logger : public std::enable_shared_from_this<Logger> {$/;"	c	namespace:rainbow	inherits:std::enable_shared_from_this
rainbow::Logger::Logger	log.cpp	/^Logger::Logger(const std::string& name)$/;"	f	class:rainbow::Logger	signature:(const std::string& name)
rainbow::Logger::Logger	log.h	/^    Logger(const std::string& name = "root");$/;"	p	class:rainbow::Logger	access:public	signature:(const std::string& name = Ó)
rainbow::Logger::addAppender	log.cpp	/^void Logger::addAppender(LogAppender::ptr appender) {$/;"	f	class:rainbow::Logger	signature:(LogAppender::ptr appender)
rainbow::Logger::addAppender	log.h	/^    void addAppender(LogAppender::ptr appender);$/;"	p	class:rainbow::Logger	access:public	signature:(LogAppender::ptr appender)
rainbow::Logger::debug	log.cpp	/^void Logger::debug(LogEvent::ptr event) { log(LogLevel::DEBUG, event); }$/;"	f	class:rainbow::Logger	signature:(LogEvent::ptr event)
rainbow::Logger::debug	log.h	/^    void debug(LogEvent::ptr event);$/;"	p	class:rainbow::Logger	access:public	signature:(LogEvent::ptr event)
rainbow::Logger::delAppender	log.cpp	/^void Logger::delAppender(LogAppender::ptr appender) {$/;"	f	class:rainbow::Logger	signature:(LogAppender::ptr appender)
rainbow::Logger::delAppender	log.h	/^    void delAppender(LogAppender::ptr appender);$/;"	p	class:rainbow::Logger	access:public	signature:(LogAppender::ptr appender)
rainbow::Logger::error	log.cpp	/^void Logger::error(LogEvent::ptr event) { log(LogLevel::ERROR, event); }$/;"	f	class:rainbow::Logger	signature:(LogEvent::ptr event)
rainbow::Logger::error	log.h	/^    void error(LogEvent::ptr event);$/;"	p	class:rainbow::Logger	access:public	signature:(LogEvent::ptr event)
rainbow::Logger::fatal	log.cpp	/^void Logger::fatal(LogEvent::ptr event) { log(LogLevel::FATAL, event); }$/;"	f	class:rainbow::Logger	signature:(LogEvent::ptr event)
rainbow::Logger::fatal	log.h	/^    void fatal(LogEvent::ptr event);$/;"	p	class:rainbow::Logger	access:public	signature:(LogEvent::ptr event)
rainbow::Logger::getLevel	log.h	/^    LogLevel::Level getLevel() const { return m_level; }$/;"	f	class:rainbow::Logger	access:public	signature:() const
rainbow::Logger::getName	log.h	/^    const std::string getName() const { return this->m_name; }$/;"	f	class:rainbow::Logger	access:public	signature:() const
rainbow::Logger::info	log.cpp	/^void Logger::info(LogEvent::ptr event) { log(LogLevel::INFO, event); }$/;"	f	class:rainbow::Logger	signature:(LogEvent::ptr event)
rainbow::Logger::info	log.h	/^    void info(LogEvent::ptr event);$/;"	p	class:rainbow::Logger	access:public	signature:(LogEvent::ptr event)
rainbow::Logger::log	log.cpp	/^void Logger::log(LogLevel::Level level, LogEvent::ptr event) {$/;"	f	class:rainbow::Logger	signature:(LogLevel::Level level, LogEvent::ptr event)
rainbow::Logger::log	log.h	/^    void log(LogLevel::Level level, LogEvent::ptr event);$/;"	p	class:rainbow::Logger	access:public	signature:(LogLevel::Level level, LogEvent::ptr event)
rainbow::Logger::m_appenders	log.h	/^    std::list<LogAppender::ptr> m_appenders;  \/\/ Appenderéå$/;"	m	class:rainbow::Logger	access:private
rainbow::Logger::m_formatter	log.h	/^    LogFormatter::ptr m_formatter;$/;"	m	class:rainbow::Logger	access:private
rainbow::Logger::m_level	log.h	/^    LogLevel::Level m_level;  \/\/ æ»¡è¶³æ¥å¿çº§å«çæ¥å¿æä¼è¢«è¾åº$/;"	m	class:rainbow::Logger	access:private
rainbow::Logger::m_name	log.h	/^    std::string m_name = "root";       \/\/ æ¥å¿åç§°$/;"	m	class:rainbow::Logger	access:private
rainbow::Logger::ptr	log.h	/^    typedef std::shared_ptr<Logger> ptr;$/;"	t	class:rainbow::Logger	access:public
rainbow::Logger::setAppender	log.h	/^    void setAppender(LogLevel::Level val) { m_level = val; }$/;"	f	class:rainbow::Logger	access:public	signature:(LogLevel::Level val)
rainbow::Logger::warn	log.cpp	/^void Logger::warn(LogEvent::ptr event) { log(LogLevel::WARN, event); }$/;"	f	class:rainbow::Logger	signature:(LogEvent::ptr event)
rainbow::Logger::warn	log.h	/^    void warn(LogEvent::ptr event);$/;"	p	class:rainbow::Logger	access:public	signature:(LogEvent::ptr event)
rainbow::MessageFormatItem	log.cpp	/^class MessageFormatItem : public LogFormatter::FormatItem {$/;"	c	namespace:rainbow	file:	inherits:LogFormatter::FormatItem
rainbow::MessageFormatItem::MessageFormatItem	log.cpp	/^    MessageFormatItem(const std::string& str = "") {}$/;"	f	class:rainbow::MessageFormatItem	access:public	signature:(const std::string& str = Ó)
rainbow::NameFormatItem	log.cpp	/^class NameFormatItem : public LogFormatter::FormatItem {$/;"	c	namespace:rainbow	file:	inherits:LogFormatter::FormatItem
rainbow::NameFormatItem::NameFormatItem	log.cpp	/^    NameFormatItem(const std::string str = "") {}$/;"	f	class:rainbow::NameFormatItem	access:public	signature:(const std::string str = Ó)
rainbow::NewLineFormatItem	log.cpp	/^class NewLineFormatItem : public LogFormatter::FormatItem {$/;"	c	namespace:rainbow	file:	inherits:LogFormatter::FormatItem
rainbow::NewLineFormatItem::NewLineFormatItem	log.cpp	/^    NewLineFormatItem(const std::string str = "") {}$/;"	f	class:rainbow::NewLineFormatItem	access:public	signature:(const std::string str = Ó)
rainbow::StdoutLogAppender	log.h	/^class StdoutLogAppender : public LogAppender {$/;"	c	namespace:rainbow	inherits:LogAppender
rainbow::StdoutLogAppender::log	log.cpp	/^void StdoutLogAppender::log(std::shared_ptr<Logger> logger,$/;"	f	class:rainbow::StdoutLogAppender	signature:(std::shared_ptr<Logger> logger, LogLevel::Level level, LogEvent::ptr event)
rainbow::StdoutLogAppender::override	log.h	/^                     LogEvent::ptr event) override;$/;"	m	class:rainbow::StdoutLogAppender	access:public
rainbow::StdoutLogAppender::ptr	log.h	/^    typedef std::shared_ptr<StdoutLogAppender> ptr;$/;"	t	class:rainbow::StdoutLogAppender	access:public
rainbow::StringFormatItem	log.cpp	/^class StringFormatItem : public LogFormatter::FormatItem {$/;"	c	namespace:rainbow	file:	inherits:LogFormatter::FormatItem
rainbow::StringFormatItem::StringFormatItem	log.cpp	/^    StringFormatItem(const std::string& str) : m_string(str) {}$/;"	f	class:rainbow::StringFormatItem	access:public	signature:(const std::string& str)
rainbow::StringFormatItem::getString	log.cpp	/^    std::string getString() const { return m_string; }$/;"	f	class:rainbow::StringFormatItem	access:public	signature:() const
rainbow::StringFormatItem::m_string	log.cpp	/^    std::string m_string;$/;"	m	class:rainbow::StringFormatItem	file:	access:private
rainbow::TabFormatItem	log.cpp	/^class TabFormatItem : public LogFormatter::FormatItem {$/;"	c	namespace:rainbow	file:	inherits:LogFormatter::FormatItem
rainbow::TabFormatItem::TabFormatItem	log.cpp	/^     TabFormatItem(const std::string& str = "") {}$/;"	f	class:rainbow::TabFormatItem	access:public	signature:(const std::string& str = Ó)
rainbow::ThreadIdFormatItem	log.cpp	/^class ThreadIdFormatItem : public LogFormatter::FormatItem {$/;"	c	namespace:rainbow	file:	inherits:LogFormatter::FormatItem
rainbow::ThreadIdFormatItem::ThreadIdFormatItem	log.cpp	/^    ThreadIdFormatItem(const std::string str = "") {}$/;"	f	class:rainbow::ThreadIdFormatItem	access:public	signature:(const std::string str = Ó)
reopen	log.cpp	/^bool FileLogAppender::reopen() {$/;"	f	class:rainbow::FileLogAppender	signature:()
reopen	log.h	/^    bool reopen();$/;"	p	class:rainbow::FileLogAppender	access:public	signature:()
setAppender	log.h	/^    void setAppender(LogLevel::Level val) { m_level = val; }$/;"	f	class:rainbow::Logger	access:public	signature:(LogLevel::Level val)
setFormatter	log.h	/^    void setFormatter(LogFormatter::ptr val) { m_formatter = val; }$/;"	f	class:rainbow::LogAppender	access:public	signature:(LogFormatter::ptr val)
warn	log.cpp	/^void Logger::warn(LogEvent::ptr event) { log(LogLevel::WARN, event); }$/;"	f	class:rainbow::Logger	signature:(LogEvent::ptr event)
warn	log.h	/^    void warn(LogEvent::ptr event);$/;"	p	class:rainbow::Logger	access:public	signature:(LogEvent::ptr event)
~FormatItem	log.h	/^        virtual ~FormatItem() {}$/;"	f	class:rainbow::LogFormatter::FormatItem	access:public	signature:()
~LogAppender	log.h	/^    virtual ~LogAppender() {}$/;"	f	class:rainbow::LogAppender	access:public	signature:()
~LogEvent	log.h	/^    ~LogEvent() {}$/;"	f	class:rainbow::LogEvent	access:public	signature:()
~LogEventWrap	log.cpp	/^LogEventWrap::~LogEventWrap() {$/;"	f	class:rainbow::LogEventWrap	signature:()
~LogEventWrap	log.h	/^    ~LogEventWrap();$/;"	p	class:rainbow::LogEventWrap	access:public	signature:()
